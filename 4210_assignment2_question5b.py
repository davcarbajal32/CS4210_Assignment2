# -*- coding: utf-8 -*-
"""4210_assignment2_question5B.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MltwJM0t2vaGVdK11WEgYM8en9kOo_NI
"""

#-------------------------------------------------------------------------
# AUTHOR: David Carbajal
# FILENAME: 4210_assignment2_question3E.ipynb, weather_test.csv, weather_training.csv
# SPECIFICATION: that will read the file weather_training.csv (training set) and output the classification of each of the 10 instances from the file weather_test (test set) if the classification confidence is >= 0.75
# FOR: CS 4210- Assignment #2
# TIME SPENT: 20 minutes
#-----------------------------------------------------------*/
#IMPORTANT NOTE: YOU ARE ALLOWED TO USE ANY PYTHON LIBRARY TO COMPLETE THIS PROGRAM
#Importing some Python libraries
from sklearn.naive_bayes import GaussianNB
import pandas as pd
dbTraining = []
dbTest = []

#Reading the training data using Pandas
df = pd.read_csv('weather_training.csv')
for _, row in df.iterrows():
  dbTraining.append(row.tolist())

#Transform the original training features to numbers and add them to the 4D array X.
#For instance Sunny = 1, Overcast = 2, Rain = 3, X = [[3, 1, 1, 2], [1, 3, 2,2], ...]]
#--> add your Python code here
outlook = {'Sunny': 1, 'Overcast': 2, 'Rain': 3}
temp = {'Hot': 1, 'Mild': 2, 'Cool': 3}
humidity = {'High': 1, 'Normal': 2}
wind = {'Weak': 1, 'Strong': 2}

#Transform the original training classes to numbers and add them to the vector Y.
#For instance Yes = 1, No = 2, so Y = [1, 1, 2, 2, ...]
#--> add your Python code here
X = []
for row in dbTraining:
  X.append([
      outlook[row[1]],
      temp[row[2]],
      humidity[row[3]],
      wind[row[4]]
  ])

class_value = {'Yes': 1, 'No': 2}
Y = []
for row in dbTraining:
  Y.append(class_value[row[5]])

#Fitting the naive bayes to the data using smoothing
#--> add your Python code here
clf = GaussianNB()
clf.fit(X, Y)

#Reading the test data using Pandas
df = pd.read_csv('weather_test.csv')
for _, row in df.iterrows():
  dbTest.append(row.tolist())

#Printing the header os the solution
#--> add your Python code here
print("Day Outlook Temperature Humidity Wind PlayTennis Confidence")

#Use your test samples to make probabilistic predictions. For instance: clf.predict_proba([[3, 1, 2, 1]])[0]
#--> add your Python code here
for row in dbTest:
  sample = [[
      outlook[row[1]],
      temp[row[2]],
      humidity[row[3]],
      wind[row[4]]
  ]]

  probability = clf.predict_proba(sample)[0]
  prediction = clf.predict(sample)[0]
  confidence = max(probability)
  if confidence >= 0.75:
    if prediction == 1:
      class_value = 'Yes'
    else: 'No'
    print(f"{row[0]} {row[1]} {row[2]} {row[3]} {row[4]} {class_value} {confidence:.2f}")